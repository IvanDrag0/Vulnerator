using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.Command;
using GalaSoft.MvvmLight.Messaging;
using LiveCharts;
using LiveCharts.Defaults;
using LiveCharts.Wpf;
using log4net;
using MahApps.Metro;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Entity;
using System.Data.SQLite;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Windows;
using System.Data.SQLite.Linq;
using Vulnerator.Model.BusinessLogic;
using Vulnerator.Model.DataAccess;
using Vulnerator.Model.Entity;
using Vulnerator.Model.Object;
using Vulnerator.ViewModel.ViewModelHelper;

namespace Vulnerator.ViewModel
{
    public class VulnerabilityViewModel : ViewModelBase
    {
        public string[] Labels { get; set; }
        public SeriesCollection ColumnSeriesCollection { get; set; }
        public SeriesCollection AreaSerisCollection { get; set; }
        public List<int> Values { get; set; }
        public Func<double, string> Formatter { get; set; }
        public Func<double, string> DateFormatter { get; set; }
        OpenFileDialog openFileDialog;
        private SaveFileDialog saveExcelFile;
        private SaveFileDialog savePdfFile;
        private BackgroundWorker backgroundWorker;
        private static readonly ILog log = LogManager.GetLogger(typeof(Logger));
        public static Stopwatch stopWatch = new Stopwatch();
        public static Stopwatch fileStopWatch = new Stopwatch();
        private DatabaseInterface databaseInterface = new DatabaseInterface();

        private List<UniqueFinding> _uniqueFindings;
        public List<UniqueFinding> UniqueFindings
        {
            get { return _uniqueFindings; }
            set
            {
                if (_uniqueFindings != value)
                {
                    _uniqueFindings = value;
                    RaisePropertyChanged("UniqueFindings");
                }
            }
        }

        private AsyncObservableCollection<string> _supportedFileTypes;
        public AsyncObservableCollection<string> SupportedFileTypes
        {
            get { return _supportedFileTypes; }
            set
            {
                if (_supportedFileTypes != value)
                {
                    _supportedFileTypes = value;
                    RaisePropertyChanged("SupportedFileTypes");
                }
            }
        }

        private AsyncObservableCollection<Model.Object.File> _ingestedFiles;
        public AsyncObservableCollection<Model.Object.File> IngestedFiles
        {
            get { return _ingestedFiles; }
            set
            {
                if (_ingestedFiles != value)
                {
                    _ingestedFiles = value;
                    RaisePropertyChanged("IngestedFiles");
                }
            }
        }

        private List<RequiredReport> _reports;
        public List<RequiredReport> Reports
        {
            get { return _reports; }
            set
            {
                if (_reports != value)
                {
                    _reports = value;
                    RaisePropertyChanged("Reports");
                }
            }
        }

        private RequiredReport _selectedReport;
        public RequiredReport SelectedReport
        {
            get { return _selectedReport; }
            set
            {
                if (_selectedReport != value)
                {
                    _selectedReport = value;
                    RaisePropertyChanged("SelectedReport");
                }
            }
        }

        public VulnerabilityViewModel()
        {
            try
            {
                SupportedFileTypes = new AsyncObservableCollection<string>();
                IngestedFiles = new AsyncObservableCollection<Model.Object.File>();
                PopulateGui();
                if (UniqueFindings != null && UniqueFindings.Count > 0)
                { SetTrendSeries(); }
                Messenger.Default.Register<NotificationMessage<string>>(this, MessengerToken.ModelUpdated, (msg) => HandleModelUpdate(msg.Notification));
            }
            catch (Exception exception)
            {
                log.Error(string.Format("Unable to instantiate VulnerbailityViewModel."));
                log.Debug("Exception details:", exception);
            }
        }

        private void HandleModelUpdate(string modelUpdated)
        { 
            try
            {
                if (modelUpdated.Equals("AllModels") || modelUpdated.Equals("VulnerabilityModel"))
                { PopulateGui(); }
            }
            catch (Exception exception)
            {
                log.Error(string.Format("Unable to update VulnerabilityViewModel."));
                log.Debug("Exception details:", exception);
            }
        }

        private void PopulateGui()
        {
            using (DatabaseContext databaseContext = new DatabaseContext())
            {
                PopulateVulnerabilityList(databaseContext);
                PopulateReports(databaseContext);
                PopulateSupportedFileTypes(databaseContext);
            }
        }

        private void PopulateSupportedFileTypes(DatabaseContext databaseContext)
        {
            if (SupportedFileTypes.Count == 0)
            {
                foreach (FindingType findingType in databaseContext.FindingTypes.AsNoTracking().ToList())
                { SupportedFileTypes.Add("Import " + findingType.Finding_Type); }
            }
        }

        private void PopulateVulnerabilityList(DatabaseContext databaseContext)
        { 
            try
            {
                UniqueFindings = databaseContext.UniqueFindings
                    .Include(u => u.Vulnerability)
                    .Include(u => u.Hardware)
                    .Include(u => u.FindingType)
                    .Include(u => u.UniqueFindingsSourceFile)
                    .AsNoTracking()
                    .ToList();
            }
            catch (Exception exception)
            {
                log.Error(string.Format("Unable to populate unique findings list."));
                log.Debug("Exception details:", exception);
            }
        }

        private void PopulateReports(DatabaseContext databaseContext)
        {
            try
            {
                Reports = databaseContext.RequiredReports
                    .Include(r => r.ReportCategory)
                    .Where(r => r.ReportCategory.Report_Category_Name.Equals("Vulnerability Management") && !r.Is_Report_Enabled.Equals("False"))
                    .OrderBy(r => r.ReportCategory.Report_Category_Name)
                    .ThenBy(r => r.Displayed_Report_Name)
                    .AsNoTracking()
                    .ToList();
            }
            catch (Exception exception)
            {
                log.Error(string.Format("Unable to populate required reports"));
                log.Debug("Exception details:", exception);
            }
        }

        private void SetTrendSeries()
        {
            ColumnSeriesCollection = new SeriesCollection
            {
                new ColumnSeries
                {
                    Title = "ACAS",
                    Values = new ChartValues<double>
                    {
                        UniqueFindings.Count(x => x.Vulnerability.Raw_Risk == "I" && x.FindingType.Equals("ACAS")),
                        UniqueFindings.Count(x => x.Vulnerability.Raw_Risk == "II" && x.FindingType.Equals("ACAS")),
                        UniqueFindings.Count(x => x.Vulnerability.Raw_Risk == "III" && x.FindingType.Equals("ACAS"))
                    }
                }
            };
            Formatter = value => value.ToString();
        }

        public RelayCommand<object> IngestFilesCommand
        { get { return new RelayCommand<object>((p) => IngestFiles(p)); } }

        private void IngestFiles(object parameter)
        {
            if (openFileDialog != null)
            { openFileDialog = null; }
            openFileDialog = new OpenFileDialog();
            openFileDialog.Multiselect = true;
            openFileDialog.CheckFileExists = true;
            switch (parameter.ToString())
            {
                case "Import ACAS":
                    {
                        IngestAcas();
                        break;
                    }
                case "Import Ansible":
                    {
                        IngestAnsible();
                        break;
                    }
                case "Import CKL":
                    {
                        IngestCkl();
                        break;
                    }
                case "Import Fortify":
                    {
                        IngestFortify();
                        break;
                    }
                case "Import WASSP":
                    {
                        IngestWassp();
                        break;
                    }
                case "Import XCCDF":
                    {
                        IngestXccdf();
                        break;
                    }
                default:
                    { break; }
            }
            openFileDialog = null;
        }

        private void IngestAcas()
        {
            try
            {
                openFileDialog.Filter = "ACAS Files (*.csv;*.nessus)|*.csv;*.nessus";
                openFileDialog.Title = "Please select ACAS file(s)";
                openFileDialog.ShowDialog();
                if (openFileDialog.FileNames.Length > 0)
                {
                    for (int i = 0; i < openFileDialog.FileNames.Length; i++)
                    {
                        string filePath = openFileDialog.FileNames[i];
                        string fileName = Path.GetFileNameWithoutExtension(filePath);
                        if (Path.GetExtension(filePath).ToLower().Equals(".nessus"))
                        { IngestedFiles.Add(new Model.Object.File(fileName, "ACAS - Nessus", "Ready", filePath, "True")); }
                        else
                        { IngestedFiles.Add(new Model.Object.File(fileName, "ACAS - CSV", "Ready", filePath, "True")); }
                    }
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to retrieve ACAS file(s).");
                log.Debug("Exception details: " + exception);
            }
        }

        private void IngestCkl()
        {
            try
            {
                openFileDialog.Filter = "CKL Files (*.ckl)|*.ckl";
                openFileDialog.Title = "Please select CKL file(s)";
                openFileDialog.ShowDialog();
                if (openFileDialog.FileNames.Length > 0)
                {
                    for (int i = 0; i < openFileDialog.FileNames.Length; i++)
                    {
                        string filePath = openFileDialog.FileNames[i];
                        string fileName = Path.GetFileNameWithoutExtension(filePath);
                        CklReader cklReader = new CklReader();
                        Model.Object.File file = new Model.Object.File(fileName, "Checklist", "Ready", filePath, "True");
                        file = cklReader.ObtainIdentifiers(file);
                        IngestedFiles.Add(file);
                    }
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to retrieve CKL file(s).");
                log.Debug("Exception details: " + exception);
            }
        }

        private void IngestWassp()
        {
            try
            {
                openFileDialog.Filter = "WASSP Files (*.html)|*.html;*.xml";
                openFileDialog.Title = "Please select WASSP file(s)";
                openFileDialog.ShowDialog();
                if (openFileDialog.FileNames.Length > 0)
                {
                    for (int i = 0; i < openFileDialog.FileNames.Length; i++)
                    {
                        string filePath = openFileDialog.FileNames[i];
                        string fileName = Path.GetFileNameWithoutExtension(filePath);
                        if (Path.GetExtension(filePath).ToLower().Equals(".html"))
                        { IngestedFiles.Add(new Model.Object.File(fileName, "WASSP - HTML", "Ready", filePath, "True")); }
                        else
                        { IngestedFiles.Add(new Model.Object.File(fileName, "WASSP - XML", "Ready", filePath, "True")); }
                    }
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to retrieve WASSP file(s).");
                log.Debug("Exception details: " + exception);
            }
        }

        private void IngestXccdf()
        {
            try
            {
                openFileDialog.Filter = "XCCDF Files (*.xml)|*.xml";
                openFileDialog.Title = "Please select XCCDF file(s)";
                openFileDialog.ShowDialog();
                if (openFileDialog.FileNames.Length > 0)
                {
                    for (int i = 0; i < openFileDialog.FileNames.Length; i++)
                    {
                        string filePath = openFileDialog.FileNames[i];
                        string fileName = Path.GetFileNameWithoutExtension(filePath);
                        IngestedFiles.Add(new Model.Object.File(fileName, "SCAP Benchmark", "Ready", filePath, "True"));
                    }
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to retrieve XCCDF file(s).");
                log.Debug("Exception details: " + exception);
            }
        }

        private void IngestFortify()
        {
            try
            {
                openFileDialog.Filter = "Fortify FPR Files (*.fpr)|*.fpr";
                openFileDialog.Title = "Please select Fortify file(s)";
                openFileDialog.ShowDialog();
                if (openFileDialog.FileNames.Length > 0)
                {
                    for (int i = 0; i < openFileDialog.FileNames.Length; i++)
                    {
                        string filePath = openFileDialog.FileNames[i];
                        string fileName = Path.GetFileNameWithoutExtension(filePath);
                        IngestedFiles.Add(new Model.Object.File(fileName, "Fortify FPR", "Ready", filePath, "True"));
                    }
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to retrieve FPR file(s).");
                log.Debug("Exception details: " + exception);
            }
        }

        private void IngestAnsible()
        {
            try
            {
                openFileDialog.Filter = "Ansible XML Files (*.xml)|*.xml";
                openFileDialog.Title = "Please select Ansible file(s)";
                openFileDialog.ShowDialog();
                if (openFileDialog.FileNames.Length > 0)
                {
                    for (int i = 0; i < openFileDialog.FileNames.Length; i++)
                    {
                        string filePath = openFileDialog.FileNames[i];
                        string fileName = Path.GetFileNameWithoutExtension(filePath);
                        IngestedFiles.Add(new Model.Object.File(fileName, "Ansible", "Ready", filePath, "True"));
                    }
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to retrieve Ansible file(s).");
                log.Debug("Exception details: " + exception);
            }
        }

        public RelayCommand ExecuteIngestionCommand
        { get { return new RelayCommand(ExecuteIngestion); } }

        private void ExecuteIngestion()
        {
            backgroundWorker = new BackgroundWorker();
            backgroundWorker.DoWork += ExecuteIngestionBackgroundWorker_DoWork;
            backgroundWorker.RunWorkerCompleted += ExecuteIngestionBackgroundWorker_RunWorkerCompleted;
            backgroundWorker.RunWorkerAsync();
            backgroundWorker.Dispose();
        }

        private void ExecuteIngestionBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                if (IngestedFiles.Count == 0)
                {
                    e.Result = "No Files";
                    return;
                }
                else
                { ParseFiles(); }
                stopWatch.Stop();
                log.Info("File ingestion complete; Elapsed time: " + stopWatch.Elapsed.ToString());
                stopWatch.Reset();
                Messenger.Default.Send(new NotificationMessage<string>("ModelUpdate", "AllModels"), MessengerToken.ModelUpdated);
                e.Result = "Success";
            }
            catch (Exception exception)
            { e.Result = exception; }
        }

        private void ExecuteIngestionBackgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        { 
            try
            {
                Tuple<AppTheme, Accent> appStyle = ThemeManager.DetectAppStyle(Application.Current);
                Notification notification = new Notification();
                if (e.Result != null)
                {
                    if (e.Result is Exception)
                    {
                        notification.Accent = "Red";
                        notification.Background = appStyle.Item1.Resources["WindowBackgroundBrush"].ToString();
                        notification.Badge = "Failure";
                        notification.Foreground = appStyle.Item1.Resources["TextBrush"].ToString();
                        notification.Header = "STIG Library";
                        notification.Message = "STIG Library failed to ingest.";
                        Exception exception = e.Result as Exception;
                        log.Error("Unable to ingest STIG Library.");
                        log.Debug("Exception details: " + exception);
                    }
                    else
                    {
                        switch (e.Result.ToString())
                        {
                            case "Success":
                                {
                                    notification.Accent = "Green";
                                    notification.Background = appStyle.Item1.Resources["WindowBackgroundBrush"].ToString();
                                    notification.Badge = "Success";
                                    notification.Foreground = appStyle.Item1.Resources["TextBrush"].ToString();
                                    notification.Header = "File Ingestion";
                                    notification.Message = "File ingestion completed.";
                                    break;
                                }
                            case "No Files":
                                {
                                    notification.Accent = "Orange";
                                    notification.Background = appStyle.Item1.Resources["WindowBackgroundBrush"].ToString();
                                    notification.Badge = "Warning";
                                    notification.Foreground = appStyle.Item1.Resources["TextBrush"].ToString();
                                    notification.Header = "File Ingestion";
                                    notification.Message = "No files to process.";
                                    break;
                                }
                            default:
                                { break; }
                        }
                    }
                }
                Messenger.Default.Send(notification);
                GuiFeedback guiFeedback = new GuiFeedback();
                guiFeedback.SetFields("File ingestion complete", "Collapsed", true);
                Messenger.Default.Send(guiFeedback);
            }
            catch (Exception exception)
            {
                log.Error(string.Format("Unable to handle file ingestion background worker completion events."));
                log.Debug(string.Format("Exception details: {0}", exception));
            }
        }

        private void ParseFiles()
        {
            try
            {
                GuiFeedback guiFeedback = new GuiFeedback();
                guiFeedback.SetFields("Processing Files...", "Visible", false);
                Messenger.Default.Send(guiFeedback);
                stopWatch.Start();
                databaseInterface.DropVulnerabilityRelatedIndices();
                foreach (Model.Object.File file in IngestedFiles)
                {
                    fileStopWatch.Start();
                    file.Status = "Processing...";
                    guiFeedback.ProgressLabelText = "Processing File " + (IngestedFiles.IndexOf(file) + 1).ToString() + "...";
                    Messenger.Default.Send(guiFeedback);
                    log.Info("Begin processing of " + file.FileName);
                    switch (file.FileType)
                    {
                        case "ACAS - CSV":
                            {
                                AcasCsvReader acasCsvReader = new AcasCsvReader();
                                file.Status = acasCsvReader.ReadAcasCsvFile(file);
                                break;
                            }
                        case "ACAS - Nessus":
                            {
                                AcasNessusReader acasNessusReader = new AcasNessusReader();
                                file.Status = acasNessusReader.ReadAcasNessusFile(file);
                                break;
                            }
                        case "Ansible":
                            {
                                AnsibleReader ansibleReader = new AnsibleReader();
                                file.Status = ansibleReader.ReadAnsibleFile(file);
                                break;
                            }
                        case "Checklist":
                            {
                                CklReader cklReader = new CklReader();
                                file.Status = cklReader.ReadCklFile(file);
                                break;
                            }
                        case "WASSP - HTML":
                            {
                                WasspReader wasspReader = new WasspReader();
                                file.Status = wasspReader.ReadWassp(file);
                                break;
                            }
                        case "WASSP - XML":
                            {
                                XmlWasspReader xmlWasspReader = new XmlWasspReader();
                                file.Status = xmlWasspReader.ReadXmlWassp(file);
                                break;
                            }
                        case "SCAP Benchmark":
                            {
                                XccdfReader xccdfReader = new XccdfReader();
                                file.Status = xccdfReader.ReadXccdfFile(file);
                                break;
                            }
                        case "Fortify FPR":
                            {
                                FprReader fprReader = new FprReader();
                                file.Status = fprReader.ReadFpr(file);
                                break;
                            }
                        default:
                            {
                                log.Error(file.FileName + " file type is unrecognized.");
                                break;
                            }
                    }
                    fileStopWatch.Stop();
                    if (file.Status.Equals("Processed"))
                    { log.Info(file.FileName + " successfully processed; Elapsed time: " + fileStopWatch.Elapsed.ToString()); }
                    else
                    { log.Error(file.FileName + " processing failed; Elapsed time: " + fileStopWatch.Elapsed.ToString()); }
                    fileStopWatch.Reset();
                }
                databaseInterface.CreateVulnerabilityRelatedIndices();
            }
            catch (Exception exception)
            {
                log.Error(string.Format("Unable to parse ingested files."));
                log.Debug("Exception details:", exception);
            }
        }

        private bool ExcelReportsAreRequired()
        {
            bool PoamAndRarAreNeeded = bool.Parse(ConfigAlter.ReadSettingsFromDictionary("cbPoamRar"));
            bool SummaryTabIsNeeded = bool.Parse(ConfigAlter.ReadSettingsFromDictionary("cbAssetOverview"));
            bool DiscrepanciesTabIsNeeded = bool.Parse(ConfigAlter.ReadSettingsFromDictionary("cbDiscrepancies"));
            bool AcasOutputTabIsNeeded = bool.Parse(ConfigAlter.ReadSettingsFromDictionary("cbAcasOutput"));
            bool StigDetailsTabIsNeeded = bool.Parse(ConfigAlter.ReadSettingsFromDictionary("cbStigDetails"));
            if (PoamAndRarAreNeeded || SummaryTabIsNeeded || DiscrepanciesTabIsNeeded || AcasOutputTabIsNeeded || StigDetailsTabIsNeeded)
            { return true; }
            else
            { return false; }
        }

        private bool? GetExcelReportName()
        {
            saveExcelFile = new SaveFileDialog();
            saveExcelFile.AddExtension = true;
            saveExcelFile.Filter = "Excel Files (*.xlsx)|*.xlsx";
            saveExcelFile.DefaultExt = "xlsx";
            saveExcelFile.Title = "Save Excel Report";
            saveExcelFile.OverwritePrompt = true;
            saveExcelFile.CheckPathExists = true;
            return saveExcelFile.ShowDialog();
        }

        private string CreateExcelReports()
        {
            log.Info("Begin creation of " + saveExcelFile.FileName);
            fileStopWatch.Start();
            OpenXmlReportCreator openXmlReportCreator = new OpenXmlReportCreator();
            if (!openXmlReportCreator.CreateExcelReport(saveExcelFile.FileName).Contains("successful"))
            {
                log.Error("Creation of " + saveExcelFile.FileName + " failed; Elapsed time: " + fileStopWatch.Elapsed.ToString());
                fileStopWatch.Stop();
                fileStopWatch.Reset();
                return "Excel report creation error; see log for details";
            }
            else
            {
                log.Info(saveExcelFile.FileName + " created successfully; Elapsed time: " + fileStopWatch.Elapsed.ToString());
                fileStopWatch.Stop();
                fileStopWatch.Reset();
                return "Excel report created successfully";
            }
        }

        private bool PdfReportIsRequired()
        {
            if (bool.Parse(ConfigAlter.ReadSettingsFromDictionary("cbPdfSum")))
            { return true; }
            else
            { return false; }
        }

        private bool? GetPdfReportName()
        {
            savePdfFile = new SaveFileDialog();
            savePdfFile.AddExtension = true;
            savePdfFile.Filter = "PDF Files (*.pdf)|*.pdf";
            savePdfFile.DefaultExt = "xls";
            savePdfFile.Title = "Save PDF Report";
            savePdfFile.OverwritePrompt = true;
            savePdfFile.CheckPathExists = true;
            return savePdfFile.ShowDialog();
        }

        private string CreatePdfReport()
        {
            log.Info("Begin creation of " + savePdfFile.FileName);
            fileStopWatch.Start();
            PdfReportCreator pdfReportCreator = new PdfReportCreator();
            if (!pdfReportCreator.PdfWriter(savePdfFile.FileName.ToString(), string.Empty).Equals("Success"))
            {
                log.Error("Creation of " + savePdfFile.FileName + " failed; Elapsed time: " + fileStopWatch.Elapsed.ToString());
                fileStopWatch.Stop();
                fileStopWatch.Reset();
                return "PDF report creation error; see log for details";
            }
            else
            {
                log.Info(savePdfFile.FileName + " created successfully; Elapsed time: " + fileStopWatch.Elapsed.ToString());
                fileStopWatch.Stop();
                fileStopWatch.Reset();
                return "PDF summary created successfully";
            }
        }

        public RelayCommand ClearIngestedFilesCommand
        { get { return new RelayCommand(ClearIngestedFiles); } }

        private void ClearIngestedFiles()
        { IngestedFiles.Clear(); }

        public RelayCommand ExecuteExportCommand
        { get { return new RelayCommand(ExecuteExport); } }

        private void ExecuteExport()
        {
            backgroundWorker = new BackgroundWorker();
            backgroundWorker.DoWork += ExecuteExportBackgroundWorker_DoWork;
            backgroundWorker.RunWorkerAsync();
            backgroundWorker.Dispose();
        }

        private void ExecuteExportBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        { 
            try
            {
                GuiFeedback guiFeedback = new GuiFeedback();
                guiFeedback.SetFields("Generating requested reports", "Visible", false);
                Messenger.Default.Send(guiFeedback);
                if (Properties.Settings.Default.ReportPoamRar)
                {
                    if ((bool)GetExcelReportName())
                    {
                        OpenXmlReportCreator openXmlReportCreator = new OpenXmlReportCreator();
                        openXmlReportCreator.CreateExcelReport(saveExcelFile.FileName);
                    }
                }
                guiFeedback.SetFields("Report creation complete", "Collapsed", true);
                Messenger.Default.Send(guiFeedback);
            }
            catch (Exception exception)
            {
                log.Error(string.Format("Unable to export the requested reports."));
                log.Debug("Exception details:", exception);
                throw exception;
            }
        }

        public RelayCommand SetReportRequirementCommand
        { get { return new RelayCommand(SetReportRequirement); } }

        private void SetReportRequirement()
        {
            backgroundWorker = new BackgroundWorker();
            backgroundWorker.DoWork += ExecuteSetReportRequirementBackgroundWorker_DoWork;
            backgroundWorker.RunWorkerAsync();
            backgroundWorker.Dispose();
        }

        private void ExecuteSetReportRequirementBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                if (!DatabaseBuilder.sqliteConnection.State.ToString().Equals("Open"))
                { DatabaseBuilder.sqliteConnection.Open(); }
                using (SQLiteCommand sqliteCommand = DatabaseBuilder.sqliteConnection.CreateCommand())
                {
                    sqliteCommand.Parameters.Add(new SQLiteParameter("Required_Report_ID", SelectedReport.Required_Report_ID));
                    sqliteCommand.Parameters.Add(new SQLiteParameter("Is_Report_Selected", SelectedReport.Is_Report_Selected));
                    databaseInterface.UpdateRequiredReportSelected(sqliteCommand);
                }
                DatabaseBuilder.sqliteConnection.Close();
            }
            catch (Exception exception)
            {
                log.Error(string.Format("Unable to update report selection criteria for {0}", SelectedReport.Displayed_Report_Name));
                log.Debug("Exception details:", exception);
            }
        }
    }
}
