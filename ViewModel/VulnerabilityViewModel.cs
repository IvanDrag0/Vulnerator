using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.Command;
using GalaSoft.MvvmLight.Messaging;
using LiveCharts;
using LiveCharts.Defaults;
using LiveCharts.Wpf;
using log4net;
using MahApps.Metro;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Data.Entity;
using System.Data.SQLite;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Windows;
using System.Data.SQLite.Linq;
using System.Linq.Expressions;
using Vulnerator.Helper;
using Vulnerator.Model.BusinessLogic;
using Vulnerator.Model.DataAccess;
using Vulnerator.Model.Entity;
using Vulnerator.Model.Object;
using Vulnerator.ViewModel.ViewModelHelper;

namespace Vulnerator.ViewModel
{
    public class VulnerabilityViewModel : ViewModelBase
    {
        public string[] Labels { get; set; }
        public SeriesCollection ColumnSeriesCollection { get; set; }
        public SeriesCollection AreaSerisCollection { get; set; }
        public List<int> Values { get; set; }
        public Func<double, string> Formatter { get; set; }
        public Func<double, string> DateFormatter { get; set; }
        OpenFileDialog openFileDialog;
        private static readonly ILog log = LogManager.GetLogger(typeof(Logger));
        public static Stopwatch stopWatch = new Stopwatch();
        public static Stopwatch fileStopWatch = new Stopwatch();
        private DatabaseInterface databaseInterface = new DatabaseInterface();
        private bool keepConnectionAlive = true;

        private List<UniqueFinding> _uniqueFindings;
        public List<UniqueFinding> UniqueFindings
        {
            get => _uniqueFindings;
            set
            {
                if (_uniqueFindings != value)
                {
                    _uniqueFindings = value;
                    RaisePropertyChanged("UniqueFindings");
                }
            }
        }

        private AsyncObservableCollection<string> _supportedFileTypes;
        public AsyncObservableCollection<string> SupportedFileTypes
        {
            get => _supportedFileTypes;
            set
            {
                if (_supportedFileTypes != value)
                {
                    _supportedFileTypes = value;
                    RaisePropertyChanged("SupportedFileTypes");
                }
            }
        }

        private AsyncObservableCollection<Model.Object.File> _ingestedFiles;
        public AsyncObservableCollection<Model.Object.File> IngestedFiles
        {
            get => _ingestedFiles;
            set
            {
                if (_ingestedFiles != value)
                {
                    _ingestedFiles = value;
                    RaisePropertyChanged("IngestedFiles");
                }
            }
        }

        private List<RequiredReport> _reports;
        public List<RequiredReport> Reports
        {
            get => _reports;
            set
            {
                if (_reports != value)
                {
                    _reports = value;
                    RaisePropertyChanged("Reports");
                }
            }
        }

        private RequiredReport _selectedReport;
        public RequiredReport SelectedReport
        {
            get => _selectedReport;
            set
            {
                if (_selectedReport != value)
                {
                    _selectedReport = value;
                    RaisePropertyChanged("SelectedReport");
                }
            }
        }

        private ObservableCollection<MitigationsOrCondition> _projectMitigations { get; set; }

        public ObservableCollection<MitigationsOrCondition> ProjectMitigations
        {
            get => _projectMitigations;
            set
            {
                if (_projectMitigations != value)
                {
                    _projectMitigations = value;
                    RaisePropertyChanged("ProjectMitigations");
                }
            }
        }

        private object _selectedMitigationsOrCondition { get; set; }

        public object SelectedMitigationsOrCondition
        {
            get => _selectedMitigationsOrCondition;
            set
            {
                if (_selectedMitigationsOrCondition != value)
                {
                    _selectedMitigationsOrCondition = value;
                    RaisePropertyChanged("SelectedMitigationsOrCondition");
                    SetEditableMitigationOrCondition();
                }
            }
        }

        private MitigationsOrCondition _editableMitigationsOrCondition { get; set; }

        public MitigationsOrCondition EditableMitigationsOrCondition
        {
            get => _editableMitigationsOrCondition;
            set
            {
                if (_editableMitigationsOrCondition != value)
                {
                    _editableMitigationsOrCondition = value;
                    RaisePropertyChanged("EditableMitigationsOrCondition");
                }
            }
        }

        private ObservableCollection<Vulnerability> _vulnerabilities { get; set; }

        public ObservableCollection<Vulnerability> Vulnerabilities
        {
            get => _vulnerabilities;
            set
            {
                if (_vulnerabilities != value)
                {
                    _vulnerabilities = value;
                    RaisePropertyChanged("Vulnerabilities");
                }
            }
        }

        private List<NistControlsCCI> _nistControlsCcis { get; set; }

        public List<NistControlsCCI> NistControlsCcis
        {
            get => _nistControlsCcis;
            set
            {
                if (_nistControlsCcis != value)
                {
                    _nistControlsCcis = value;
                    RaisePropertyChanged("NistControlsCcis");
                }
            }
        }

        private List<NistControlsCCI> _bulkNistControlsCcis { get; set; }

        public List<NistControlsCCI> BulkNistControlsCcis
        {
            get => _bulkNistControlsCcis;
            set
            {
                if (_bulkNistControlsCcis != value)
                {
                    _bulkNistControlsCcis = value;
                    RaisePropertyChanged("BulkNistControlsCcis");
                }
            }
        }

        private Vulnerability _selectedVulnerability { get; set; }

        public Vulnerability SelectedVulnerability
        {
            get => _selectedVulnerability;
            set
            {
                if (_selectedVulnerability != value)
                {
                    _selectedVulnerability = value;
                    RaisePropertyChanged("SelectedVulnerability");
                }
            }
        }

        private NistControlsCCI _selectedNistControlsCci { get; set; }

        public NistControlsCCI SelectedNistControlsCci
        {
            get => _selectedNistControlsCci;
            set
            {
                if (_selectedNistControlsCci != value)
                {
                    _selectedNistControlsCci = value;
                    RaisePropertyChanged("SelectedNistControlsCci");
                }
            }
        }

        private List<string> _mitigationStatuses { get; set; }

        public List<string> MitigationStatuses
        {
            get => _mitigationStatuses;
            set
            {
                if (_mitigationStatuses != value)
                {
                    _mitigationStatuses = value;
                    RaisePropertyChanged("MitigationStatuses");
                }
            }
        }

        private List<string> _rmfValues { get; set; }

        public List<string> RmfValues
        {
            get => _rmfValues;
            set
            {
                if (_rmfValues != value)
                {
                    _rmfValues = value;
                    RaisePropertyChanged("RmfValues");
                }
            }
        }

        private List<Group> _groups { get; set; }

        public List<Group> Groups
        {
            get => _groups;
            set
            {
                if (_groups != value)
                {
                    _groups = value;
                    RaisePropertyChanged("Groups");
                }
            }
        }

        private string _impactDescription { get; set; }

        public string ImpactDescription
        {
            get => _impactDescription;
            set
            {
                if (_impactDescription != value)
                {
                    _impactDescription = value;
                    RaisePropertyChanged("ImpactDescription");
                }
            }
        }

        private string _predisposingConditions { get; set; }

        public string PredisposingConditions
        {
            get => _predisposingConditions;
            set
            {
                if (_predisposingConditions != value)
                {
                    _predisposingConditions = value;
                    RaisePropertyChanged("PredisposingConditions");
                }
            }
        }

        private string _technicalMitigations { get; set; }

        public string TechnicalMitigations
        {
            get => _technicalMitigations;
            set
            {
                if (_technicalMitigations != value)
                {
                    _technicalMitigations = value;
                    RaisePropertyChanged("TechnicalMitigations");
                }
            }
        }

        private string _proposedMitigations { get; set; }

        public string ProposedMitigations
        {
            get => _proposedMitigations;
            set
            {
                if (_proposedMitigations != value)
                {
                    _proposedMitigations = value;
                    RaisePropertyChanged("ProposedMitigations");
                }
            }
        }

        private string _mitigatedStatus { get; set; }

        public string MitigatedStatus
        {
            get => _mitigatedStatus;
            set
            {
                if (_mitigatedStatus != value)
                {
                    _mitigatedStatus = value;
                    RaisePropertyChanged("MitigatedStatus");
                }
            }
        }

        private string _threatRelevance { get; set; }

        public string ThreatRelevance
        {
            get => _threatRelevance;
            set
            {
                if (_threatRelevance != value)
                {
                    _threatRelevance = value;
                    RaisePropertyChanged("ThreatRelevance");
                }
            }
        }

        private string _severityPervasiveness { get; set; }

        public string SeverityPervasiveness
        {
            get => _severityPervasiveness;
            set
            {
                if (_severityPervasiveness != value)
                {
                    _severityPervasiveness = value;
                    RaisePropertyChanged("SeverityPervasiveness");
                }
            }
        }

        private string _likelihood { get; set; }

        public string Likelihood
        {
            get => _likelihood;
            set
            {
                if (_likelihood != value)
                {
                    _likelihood = value;
                    RaisePropertyChanged("Likelihood");
                }
            }
        }

        private string _impact { get; set; }

        public string Impact
        {
            get => _impact;
            set
            {
                if (_impact != value)
                {
                    _impact = value;
                    RaisePropertyChanged("Impact");
                }
            }
        }

        private string _risk { get; set; }

        public string Risk
        {
            get => _risk;
            set
            {
                if (_risk != value)
                {
                    _risk = value;
                    RaisePropertyChanged("Risk");
                }
            }
        }

        private string _residualRisk { get; set; }

        public string ResidualRisk
        {
            get => _residualRisk;
            set
            {
                if (_residualRisk != value)
                {
                    _residualRisk = value;
                    RaisePropertyChanged("ResidualRisk");
                }
            }
        }

        private string _residualRiskAfterProposed { get; set; }

        public string ResidualRiskAfterProposed
        {
            get => _residualRiskAfterProposed;
            set
            {
                if (_residualRiskAfterProposed != value)
                {
                    _residualRiskAfterProposed = value;
                    RaisePropertyChanged("ResidualRiskAfterProposed");
                }
            }
        }

        private string _estimatedCompletionDate { get; set; }

        public string EstimatedCompletionDate
        {
            get => _estimatedCompletionDate;
            set
            {
                if (_estimatedCompletionDate != value)
                {
                    _estimatedCompletionDate = value;
                    RaisePropertyChanged("EstimatedCompletionDate");
                }
            }
        }

        private bool _bulkProcessExpanded { get; set; }

        public bool BulkProcessExpanded
        {
            get => _bulkProcessExpanded;
            set
            {
                if (_bulkProcessExpanded != value)
                {
                    _bulkProcessExpanded = value;
                    RaisePropertyChanged("BulkProcessExpanded");
                }
            }
        }

        public VulnerabilityViewModel()
        {
            try
            {
                SupportedFileTypes = new AsyncObservableCollection<string>();
                IngestedFiles = new AsyncObservableCollection<Model.Object.File>();
                PopulateGui();
                if (UniqueFindings != null && UniqueFindings.Count > 0)
                { SetTrendSeries(); }
                Messenger.Default.Register<NotificationMessage<string>>(this, MessengerToken.ModelUpdated, (msg) => HandleModelUpdate(msg.Notification));
            }
            catch (Exception exception)
            {
                log.Error("Unable to instantiate VulnerabilityViewModel.");
                log.Debug("Exception details:", exception);
            }
        }

        private void HandleModelUpdate(string modelUpdated)
        { 
            try
            {
                if (modelUpdated.Equals("AllModels") || modelUpdated.Equals("VulnerabilityModel"))
                { PopulateGui(); }
            }
            catch (Exception exception)
            {
                log.Error("Unable to update VulnerabilityViewModel.");
                log.Debug("Exception details:", exception);
            }
        }

        private void PopulateGui()
        {
            MitigationStatuses = new List<string>() { "Ongoing", "Completed", "Not Reviewed", "Not Applicable" };
            RmfValues = new List<string>() { "Very High", "High", "Moderate", "Low", "Very Low" };
            using (DatabaseContext databaseContext = new DatabaseContext())
            {
                PopulateVulnerabilityList(databaseContext);
                PopulateReports(databaseContext);
                PopulateSupportedFileTypes(databaseContext);
                ProjectMitigations = databaseContext.MitigationsOrConditions
                    .Include(m => m.Groups)
                    .Include(m => m.Vulnerability)
                    .AsNoTracking()
                    .ToObservableCollection();
                Vulnerabilities = databaseContext.Vulnerabilities
                    .Include(v => v.CCIs.Select(c => c.NistControlsCCIs))
                    .Include(v => v.VulnerabilitySources)
                    .AsNoTracking()
                    .ToObservableCollection();
                NistControlsCcis = databaseContext.NistControlsCCIs
                    .Include(n => n.CCI)
                    .AsNoTracking().ToList();
                BulkNistControlsCcis = databaseContext.NistControlsCCIs
                    .Include(n => n.CCI)
                    .AsNoTracking().ToList();
                Groups = databaseContext.Groups.AsNoTracking().ToList();
            }
        }

        private void PopulateSupportedFileTypes(DatabaseContext databaseContext)
        {
            if (SupportedFileTypes.Count == 0)
            {
                foreach (FindingType findingType in databaseContext.FindingTypes.AsNoTracking().ToList())
                { SupportedFileTypes.Add("Import " + findingType.Finding_Type); }
            }
        }

        private void PopulateVulnerabilityList(DatabaseContext databaseContext)
        { 
            try
            {
                UniqueFindings = databaseContext.UniqueFindings
                    .Include(u => u.Vulnerability)
                    .Include(u => u.Hardware)
                    .Include(u => u.FindingType)
                    .Include(u => u.UniqueFindingsSourceFile)
                    .AsNoTracking()
                    .ToList();
            }
            catch (Exception exception)
            {
                log.Error("Unable to populate unique findings list.");
                log.Debug("Exception details:", exception);
            }
        }

        private void PopulateReports(DatabaseContext databaseContext)
        {
            try
            {
                Reports = databaseContext.RequiredReports
                    .Include(r => r.ReportCategory)
                    .Where(r => r.ReportCategory.Report_Category_Name.Equals("Vulnerability Management") && !r.Is_Report_Enabled.Equals("False"))
                    .OrderBy(r => r.ReportCategory.Report_Category_Name)
                    .ThenBy(r => r.Displayed_Report_Name)
                    .AsNoTracking()
                    .ToList();
            }
            catch (Exception exception)
            {
                log.Error("Unable to populate required reports");
                log.Debug("Exception details:", exception);
            }
        }

        private void SetTrendSeries()
        {
            ColumnSeriesCollection = new SeriesCollection
            {
                new ColumnSeries
                {
                    Title = "ACAS",
                    Values = new ChartValues<double>
                    {
                        UniqueFindings.Count(x => x.Vulnerability.Raw_Risk == "I" && x.FindingType.Equals("ACAS")),
                        UniqueFindings.Count(x => x.Vulnerability.Raw_Risk == "II" && x.FindingType.Equals("ACAS")),
                        UniqueFindings.Count(x => x.Vulnerability.Raw_Risk == "III" && x.FindingType.Equals("ACAS"))
                    }
                }
            };
            Formatter = value => value.ToString();
        }

        public RelayCommand<object> IngestFilesCommand
        { get { return new RelayCommand<object>((p) => IngestFiles(p)); } }

        private void IngestFiles(object parameter)
        {
            if (openFileDialog != null)
            { openFileDialog = null; }
            openFileDialog = new OpenFileDialog();
            openFileDialog.Multiselect = true;
            openFileDialog.CheckFileExists = true;
            switch (parameter.ToString())
            {
                case "Import ACAS":
                    {
                        IngestAcas();
                        break;
                    }
                case "Import Ansible":
                    {
                        IngestAnsible();
                        break;
                    }
                case "Import CKL":
                    {
                        IngestCkl();
                        break;
                    }
                case "Import Fortify":
                    {
                        IngestFortify();
                        break;
                    }
                case "Import WASSP":
                    {
                        IngestWassp();
                        break;
                    }
                case "Import XCCDF":
                    {
                        IngestXccdf();
                        break;
                    }
                default:
                    { break; }
            }
            openFileDialog = null;
        }

        private void IngestAcas()
        {
            try
            {
                openFileDialog.Filter = "ACAS Files (*.csv;*.nessus)|*.csv;*.nessus";
                openFileDialog.Title = "Please select ACAS file(s)";
                openFileDialog.ShowDialog();
                if (openFileDialog.FileNames.Length > 0)
                {
                    for (int i = 0; i < openFileDialog.FileNames.Length; i++)
                    {
                        string filePath = openFileDialog.FileNames[i];
                        string fileName = Path.GetFileNameWithoutExtension(filePath);
                        if (Path.GetExtension(filePath).ToLower().Equals(".nessus"))
                        { IngestedFiles.Add(new Model.Object.File(fileName, "ACAS - Nessus", "Ready", filePath, "True")); }
                        else
                        { IngestedFiles.Add(new Model.Object.File(fileName, "ACAS - CSV", "Ready", filePath, "True")); }
                    }
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to retrieve ACAS file(s).");
                log.Debug("Exception details: " + exception);
            }
        }

        private void IngestCkl()
        {
            try
            {
                openFileDialog.Filter = "CKL Files (*.ckl)|*.ckl";
                openFileDialog.Title = "Please select CKL file(s)";
                openFileDialog.ShowDialog();
                if (openFileDialog.FileNames.Length > 0)
                {
                    for (int i = 0; i < openFileDialog.FileNames.Length; i++)
                    {
                        string filePath = openFileDialog.FileNames[i];
                        string fileName = Path.GetFileNameWithoutExtension(filePath);
                        CklReader cklReader = new CklReader();
                        Model.Object.File file = new Model.Object.File(fileName, "Checklist", "Ready", filePath, "True");
                        file = cklReader.ObtainIdentifiers(file);
                        IngestedFiles.Add(file);
                    }
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to retrieve CKL file(s).");
                log.Debug("Exception details: " + exception);
            }
        }

        private void IngestWassp()
        {
            try
            {
                openFileDialog.Filter = "WASSP Files (*.html)|*.html;*.xml";
                openFileDialog.Title = "Please select WASSP file(s)";
                openFileDialog.ShowDialog();
                if (openFileDialog.FileNames.Length > 0)
                {
                    for (int i = 0; i < openFileDialog.FileNames.Length; i++)
                    {
                        string filePath = openFileDialog.FileNames[i];
                        string fileName = Path.GetFileNameWithoutExtension(filePath);
                        if (Path.GetExtension(filePath).ToLower().Equals(".html"))
                        { IngestedFiles.Add(new Model.Object.File(fileName, "WASSP - HTML", "Ready", filePath, "True")); }
                        else
                        { IngestedFiles.Add(new Model.Object.File(fileName, "WASSP - XML", "Ready", filePath, "True")); }
                    }
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to retrieve WASSP file(s).");
                log.Debug("Exception details: " + exception);
            }
        }

        private void IngestXccdf()
        {
            try
            {
                openFileDialog.Filter = "XCCDF Files (*.xml)|*.xml";
                openFileDialog.Title = "Please select XCCDF file(s)";
                openFileDialog.ShowDialog();
                if (openFileDialog.FileNames.Length > 0)
                {
                    for (int i = 0; i < openFileDialog.FileNames.Length; i++)
                    {
                        string filePath = openFileDialog.FileNames[i];
                        string fileName = Path.GetFileNameWithoutExtension(filePath);
                        IngestedFiles.Add(new Model.Object.File(fileName, "SCAP Benchmark", "Ready", filePath, "True"));
                    }
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to retrieve XCCDF file(s).");
                log.Debug("Exception details: " + exception);
            }
        }

        private void IngestFortify()
        {
            try
            {
                openFileDialog.Filter = "Fortify FPR Files (*.fpr)|*.fpr";
                openFileDialog.Title = "Please select Fortify file(s)";
                openFileDialog.ShowDialog();
                if (openFileDialog.FileNames.Length > 0)
                {
                    for (int i = 0; i < openFileDialog.FileNames.Length; i++)
                    {
                        string filePath = openFileDialog.FileNames[i];
                        string fileName = Path.GetFileNameWithoutExtension(filePath);
                        IngestedFiles.Add(new Model.Object.File(fileName, "Fortify FPR", "Ready", filePath, "True"));
                    }
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to retrieve FPR file(s).");
                log.Debug("Exception details: " + exception);
            }
        }

        private void IngestAnsible()
        {
            try
            {
                openFileDialog.Filter = "Ansible XML Files (*.xml)|*.xml";
                openFileDialog.Title = "Please select Ansible file(s)";
                openFileDialog.ShowDialog();
                if (openFileDialog.FileNames.Length > 0)
                {
                    for (int i = 0; i < openFileDialog.FileNames.Length; i++)
                    {
                        string filePath = openFileDialog.FileNames[i];
                        string fileName = Path.GetFileNameWithoutExtension(filePath);
                        IngestedFiles.Add(new Model.Object.File(fileName, "Ansible", "Ready", filePath, "True"));
                    }
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to retrieve Ansible file(s).");
                log.Debug("Exception details: " + exception);
            }
        }

        public RelayCommand ExecuteIngestionCommand => new RelayCommand(ExecuteIngestion);

        private void ExecuteIngestion()
        {
            BackgroundWorker backgroundWorker = new BackgroundWorker();
            backgroundWorker.DoWork += ExecuteIngestionBackgroundWorker_DoWork;
            backgroundWorker.RunWorkerCompleted += ExecuteIngestionBackgroundWorker_RunWorkerCompleted;
            backgroundWorker.RunWorkerAsync();
            backgroundWorker.Dispose();
        }

        private void ExecuteIngestionBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                if (IngestedFiles.Count == 0)
                {
                    e.Result = "No Files";
                    return;
                }
                else
                { ParseFiles(); }
                stopWatch.Stop();
                log.Info("File ingestion complete; Elapsed time: " + stopWatch.Elapsed.ToString());
                stopWatch.Reset();
                Messenger.Default.Send(new NotificationMessage<string>("ModelUpdate", "AllModels"), MessengerToken.ModelUpdated);
                e.Result = "Success";
            }
            catch (Exception exception)
            { e.Result = exception; }
        }

        private void ExecuteIngestionBackgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        { 
            try
            {
                Tuple<AppTheme, Accent> appStyle = ThemeManager.DetectAppStyle(Application.Current);
                Notification notification = new Notification();
                if (e.Result != null)
                {
                    if (e.Result is Exception)
                    {
                        notification.Accent = "Red";
                        notification.Background = appStyle.Item1.Resources["WindowBackgroundBrush"].ToString();
                        notification.Badge = "Failure";
                        notification.Foreground = appStyle.Item1.Resources["TextBrush"].ToString();
                        notification.Header = "STIG Library";
                        notification.Message = "STIG Library failed to ingest.";
                        Exception exception = e.Result as Exception;
                        log.Error("Unable to ingest STIG Library.");
                        log.Debug("Exception details: " + exception);
                    }
                    else
                    {
                        switch (e.Result.ToString())
                        {
                            case "Success":
                                {
                                    notification.Accent = "Green";
                                    notification.Background = appStyle.Item1.Resources["WindowBackgroundBrush"].ToString();
                                    notification.Badge = "Success";
                                    notification.Foreground = appStyle.Item1.Resources["TextBrush"].ToString();
                                    notification.Header = "File Ingestion";
                                    notification.Message = "File ingestion completed.";
                                    break;
                                }
                            case "No Files":
                                {
                                    notification.Accent = "Orange";
                                    notification.Background = appStyle.Item1.Resources["WindowBackgroundBrush"].ToString();
                                    notification.Badge = "Warning";
                                    notification.Foreground = appStyle.Item1.Resources["TextBrush"].ToString();
                                    notification.Header = "File Ingestion";
                                    notification.Message = "No files to process.";
                                    break;
                                }
                            default:
                                { break; }
                        }
                    }
                }
                Messenger.Default.Send(notification);
                GuiFeedback guiFeedback = new GuiFeedback();
                guiFeedback.SetFields("File ingestion complete", "Collapsed", true);
                Messenger.Default.Send(guiFeedback);
            }
            catch (Exception exception)
            {
                log.Error("Unable to handle file ingestion background worker completion events.");
                log.Debug($"Exception details: {exception}");
            }
        }

        private void ParseFiles()
        {
            try
            {
                GuiFeedback guiFeedback = new GuiFeedback();
                guiFeedback.SetFields("Processing Files...", "Visible", false);
                Messenger.Default.Send(guiFeedback);
                stopWatch.Start();
                databaseInterface.DropVulnerabilityRelatedIndices();
                foreach (Model.Object.File file in IngestedFiles)
                {
                    fileStopWatch.Start();
                    file.Status = "Processing...";
                    guiFeedback.ProgressLabelText = "Processing File " + (IngestedFiles.IndexOf(file) + 1).ToString() + "...";
                    Messenger.Default.Send(guiFeedback);
                    log.Info("Begin processing of " + file.FileName);
                    switch (file.FileType)
                    {
                        case "ACAS - CSV":
                            {
                                AcasCsvReader acasCsvReader = new AcasCsvReader();
                                file.Status = acasCsvReader.ReadAcasCsvFile(file);
                                break;
                            }
                        case "ACAS - Nessus":
                            {
                                AcasNessusReader acasNessusReader = new AcasNessusReader();
                                file.Status = acasNessusReader.ReadAcasNessusFile(file);
                                break;
                            }
                        case "Ansible":
                            {
                                AnsibleReader ansibleReader = new AnsibleReader();
                                file.Status = ansibleReader.ReadAnsibleFile(file);
                                break;
                            }
                        case "Checklist":
                            {
                                CklReader cklReader = new CklReader();
                                file.Status = cklReader.ReadCklFile(file);
                                break;
                            }
                        case "WASSP - HTML":
                            {
                                WasspReader wasspReader = new WasspReader();
                                file.Status = wasspReader.ReadWassp(file);
                                break;
                            }
                        case "WASSP - XML":
                            {
                                XmlWasspReader xmlWasspReader = new XmlWasspReader();
                                file.Status = xmlWasspReader.ReadXmlWassp(file);
                                break;
                            }
                        case "SCAP Benchmark":
                            {
                                XccdfReader xccdfReader = new XccdfReader();
                                file.Status = xccdfReader.ReadXccdfFile(file);
                                break;
                            }
                        case "Fortify FPR":
                            {
                                FprReader fprReader = new FprReader();
                                file.Status = fprReader.ReadFpr(file);
                                break;
                            }
                        default:
                            {
                                log.Error(file.FileName + " file type is unrecognized.");
                                break;
                            }
                    }
                    fileStopWatch.Stop();
                    if (file.Status.Equals("Processed"))
                    { log.Info(file.FileName + " successfully processed; Elapsed time: " + fileStopWatch.Elapsed.ToString()); }
                    else
                    { log.Error(file.FileName + " processing failed; Elapsed time: " + fileStopWatch.Elapsed.ToString()); }
                    fileStopWatch.Reset();
                }
                databaseInterface.CreateVulnerabilityRelatedIndices();
            }
            catch (Exception exception)
            {
                log.Error("Unable to parse ingested files.");
                log.Debug("Exception details:", exception);
            }
        }

        public RelayCommand ClearIngestedFilesCommand => new RelayCommand(ClearIngestedFiles);

        private void ClearIngestedFiles()
        { IngestedFiles.Clear(); }


        private List<Likelihood> PopulateLikelihoodMatrix()
        { 
            try
            {
                return new List<Likelihood>()
                {
                    new Likelihood() { Relevance = "Very High", SeverityOrPervasiveness = "Very Low", CalculatedLikelihood = "Very Low" },
                    new Likelihood() { Relevance = "Very High", SeverityOrPervasiveness = "Low", CalculatedLikelihood = "Low" },
                    new Likelihood() { Relevance = "Very High", SeverityOrPervasiveness = "Moderate", CalculatedLikelihood = "Moderate" },
                    new Likelihood() { Relevance = "Very High", SeverityOrPervasiveness = "High", CalculatedLikelihood = "High" },
                    new Likelihood() { Relevance = "Very High", SeverityOrPervasiveness = "Very High", CalculatedLikelihood = "Very High" },
                    new Likelihood() { Relevance = "High", SeverityOrPervasiveness = "Very Low", CalculatedLikelihood = "Very Low" },
                    new Likelihood() { Relevance = "High", SeverityOrPervasiveness = "Low", CalculatedLikelihood = "Low" },
                    new Likelihood() { Relevance = "High", SeverityOrPervasiveness = "Moderate", CalculatedLikelihood = "Moderate" },
                    new Likelihood() { Relevance = "High", SeverityOrPervasiveness = "High", CalculatedLikelihood = "High" },
                    new Likelihood() { Relevance = "High", SeverityOrPervasiveness = "Very High", CalculatedLikelihood = "Very High" },
                    new Likelihood() { Relevance = "Moderate", SeverityOrPervasiveness = "Very Low", CalculatedLikelihood = "Very Low" },
                    new Likelihood() { Relevance = "Moderate", SeverityOrPervasiveness = "Low", CalculatedLikelihood = "Low" },
                    new Likelihood() { Relevance = "Moderate", SeverityOrPervasiveness = "Moderate", CalculatedLikelihood = "Moderate" },
                    new Likelihood() { Relevance = "Moderate", SeverityOrPervasiveness = "High", CalculatedLikelihood = "Moderate" },
                    new Likelihood() { Relevance = "Moderate", SeverityOrPervasiveness = "Very High", CalculatedLikelihood = "High" },
                    new Likelihood() { Relevance = "Low", SeverityOrPervasiveness = "Very Low", CalculatedLikelihood = "Very Low" },
                    new Likelihood() { Relevance = "Low", SeverityOrPervasiveness = "Low", CalculatedLikelihood = "Low" },
                    new Likelihood() { Relevance = "Low", SeverityOrPervasiveness = "Moderate", CalculatedLikelihood = "Low" },
                    new Likelihood() { Relevance = "Low", SeverityOrPervasiveness = "High", CalculatedLikelihood = "Low" },
                    new Likelihood() { Relevance = "Low", SeverityOrPervasiveness = "Very High", CalculatedLikelihood = "Moderate" },
                    new Likelihood() { Relevance = "Very Low", SeverityOrPervasiveness = "Very Low", CalculatedLikelihood = "Very Low" },
                    new Likelihood() { Relevance = "Very Low", SeverityOrPervasiveness = "Low", CalculatedLikelihood = "Very Low" },
                    new Likelihood() { Relevance = "Very Low", SeverityOrPervasiveness = "Moderate", CalculatedLikelihood = "Low" },
                    new Likelihood() { Relevance = "Very Low", SeverityOrPervasiveness = "High", CalculatedLikelihood = "Low" },
                    new Likelihood() { Relevance = "Very Low", SeverityOrPervasiveness = "Very High", CalculatedLikelihood = "Low" }
                };
            }
            catch (Exception exception)
            {
                log.Error("Unable to populate Likelihood Matrix.");
                throw exception;
            }
        }

        private List<Risk> PopulateRiskMatrix()
        { 
            try
            {
                return new List<Risk>()
                {
                    new Risk() { Likelihood = "Very High", Impact = "Very Low", CalculatedRisk = "Very Low" },
                    new Risk() { Likelihood = "Very High", Impact = "Low", CalculatedRisk = "Low" },
                    new Risk() { Likelihood = "Very High", Impact = "Moderate", CalculatedRisk = "Moderate" },
                    new Risk() { Likelihood = "Very High", Impact = "High", CalculatedRisk = "High" },
                    new Risk() { Likelihood = "Very High", Impact = "Very High", CalculatedRisk = "Very High" },
                    new Risk() { Likelihood = "High", Impact = "Very Low", CalculatedRisk = "Very Low" },
                    new Risk() { Likelihood = "High", Impact = "Low", CalculatedRisk = "Low" },
                    new Risk() { Likelihood = "High", Impact = "Moderate", CalculatedRisk = "Moderate" },
                    new Risk() { Likelihood = "High", Impact = "High", CalculatedRisk = "High" },
                    new Risk() { Likelihood = "High", Impact = "Very High", CalculatedRisk = "Very High" },
                    new Risk() { Likelihood = "Moderate", Impact = "Very Low", CalculatedRisk = "Very Low" },
                    new Risk() { Likelihood = "Moderate", Impact = "Low", CalculatedRisk = "Low" },
                    new Risk() { Likelihood = "Moderate", Impact = "Moderate", CalculatedRisk = "Moderate" },
                    new Risk() { Likelihood = "Moderate", Impact = "High", CalculatedRisk = "Moderate" },
                    new Risk() { Likelihood = "Moderate", Impact = "Very High", CalculatedRisk = "High" },
                    new Risk() { Likelihood = "Low", Impact = "Very Low", CalculatedRisk = "Very Low" },
                    new Risk() { Likelihood = "Low", Impact = "Low", CalculatedRisk = "Low" },
                    new Risk() { Likelihood = "Low", Impact = "Moderate", CalculatedRisk = "Low" },
                    new Risk() { Likelihood = "Low", Impact = "High", CalculatedRisk = "Low" },
                    new Risk() { Likelihood = "Low", Impact = "Very High", CalculatedRisk = "Moderate" },
                    new Risk() { Likelihood = "Very Low", Impact = "Very Low", CalculatedRisk = "Very Low" },
                    new Risk() { Likelihood = "Very Low", Impact = "Low", CalculatedRisk = "Very Low" },
                    new Risk() { Likelihood = "Very Low", Impact = "Moderate", CalculatedRisk = "Low" },
                    new Risk() { Likelihood = "Very Low", Impact = "High", CalculatedRisk = "Low" },
                    new Risk() { Likelihood = "Very Low", Impact = "Very High", CalculatedRisk = "Low" }
                };
            }
            catch (Exception exception)
            {
                log.Error("");
                log.Debug("Exception details:", exception);
                throw exception;
            }
        }

        public RelayCommand<object> ShowSelectedControlsCommand
        { get { return new RelayCommand<object>((p) => ShowSelectedControls(p)); } }

        private void ShowSelectedControls(object parameter)
        {
            try
            {
                if (parameter == null)
                { return; }
                foreach (NistControlsCCI nistControlsCci in NistControlsCcis)
                { nistControlsCci.IsChecked = false; }
                Vulnerability vulnerability = parameter as Vulnerability;
                foreach (CCI cci in vulnerability.CCIs)
                { NistControlsCcis.FirstOrDefault(n => n.CCI_ID == cci.CCI_ID).IsChecked = true; }
            }
            catch (Exception exception)
            {
                log.Error("Unable to show selected controls for the selected item.");
                log.Debug("Exception details:", exception);
            }
        }

        public RelayCommand<object> UpdateVulnerabilityCciMappingCommand
        { get { return new RelayCommand<object>((p) => UpdateVulnerabilityCciMapping(p)); } }

        private void UpdateVulnerabilityCciMapping(object parameter)
        {
            try
            {
                if (DatabaseBuilder.sqliteConnection.State.ToString().Equals("Closed"))
                { DatabaseBuilder.sqliteConnection.Open(); }
                using (SQLiteCommand sqliteCommand = DatabaseBuilder.sqliteConnection.CreateCommand())
                {
                    sqliteCommand.Parameters.Add(new SQLiteParameter("Unique_Vulnerability_Identifier", SelectedVulnerability.Unique_Vulnerability_Identifier));
                    sqliteCommand.Parameters.Add(new SQLiteParameter("CCI", SelectedNistControlsCci.CCI.CCI1));

                    if (SelectedNistControlsCci.IsChecked)
                    { databaseInterface.MapVulnerabilityToCci(sqliteCommand); }
                    else
                    { databaseInterface.DeleteVulnerabilityToCciMapping(sqliteCommand); }
                }
                DatabaseBuilder.sqliteConnection.Close();
                Vulnerabilities.FirstOrDefault(v => v == SelectedVulnerability).CCIs.Add(SelectedNistControlsCci.CCI);
            }
            catch (Exception exception)
            {
                log.Error("Unable to map vulnerability to CCI");
                log.Debug("Exception details:", exception);
            }
        }

        public RelayCommand BulkUpdatedVulnerabilityCciMappingCommand => new RelayCommand(BulkUpdateVulnerabilityCciMapping);

        private void BulkUpdateVulnerabilityCciMapping()
        {
            try
            {
                List<NistControlsCCI> checkedNistControlList = BulkNistControlsCcis.Where(n => n.IsChecked).ToList();
                if (DatabaseBuilder.sqliteConnection.State.ToString().Equals("Closed"))
                { DatabaseBuilder.sqliteConnection.Open(); }
                using (SQLiteTransaction sqliteTransaction = DatabaseBuilder.sqliteConnection.BeginTransaction())
                {
                    foreach (Vulnerability vulnerability in Vulnerabilities.Where(v => v.IsChecked))
                    {
                        using (SQLiteCommand sqliteCommand = DatabaseBuilder.sqliteConnection.CreateCommand())
                        {
                            sqliteCommand.Parameters.Add(new SQLiteParameter("CCI"));
                            sqliteCommand.Parameters.Add(
                                new SQLiteParameter("Unique_Vulnerability_Identifier", vulnerability.Unique_Vulnerability_Identifier));
                            foreach (NistControlsCCI nistControlCci in checkedNistControlList)
                            {
                                sqliteCommand.Parameters["CCI"].Value = nistControlCci.CCI.CCI1;
                                databaseInterface.MapVulnerabilityToCci(sqliteCommand);
                                vulnerability.CCIs.Add(nistControlCci.CCI);
                            }
                        }
                    }
                    sqliteTransaction.Commit();
                }
                DatabaseBuilder.sqliteConnection.Close();
                foreach (NistControlsCCI nistControlCci in BulkNistControlsCcis.Where(n => n.IsChecked))
                { nistControlCci.IsChecked = false; }
                SelectedNistControlsCci = null;
                SelectedVulnerability = null;
            }
            catch (Exception exception)
            {
                log.Error("Unable to bulk process vulnerability to CCI mapping.");
                log.Debug("Exception details:", exception);
            }
        }

        private void SetInitialSqliteParameters(string sendingEntity, SQLiteCommand sqliteCommand)
        { 
            try
            {
                switch (sendingEntity)
                {
                    case "MitigationOrCondition":
                        {
                            string[] parameters = {
                                "MitigationOrCondition_ID", "Vulnerability_ID", "Impact_Description", "Predisposing_Conditions", "Technical_Mitigation", "Proposed_Mitigation",
                                "Threat_Relevance", "Severity_Pervasiveness", "Likelihood", "Impact", "Risk", "Residual_Risk", "Mitigated_Status", "Expiration_Date", "IsApproved",
                                "Approver", "Residual_Risk_After_Proposed", "Estimated_Completion_Date", "Approval_Date", "Group_ID"
                            };
                            foreach (string parameter in parameters)
                            { sqliteCommand.Parameters.Add(new SQLiteParameter(parameter, DBNull.Value)); }
                            break;
                        }
                    default:
                        { break; }
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to set initial SQLite Command Parameters.");
                throw exception;
            }
        }

        public RelayCommand CalculateLikelihoodCommand => new RelayCommand(CalculateLikelihood);

        private void CalculateLikelihood()
        {
            try
            {
                if (SelectedMitigationsOrCondition != null)
                {
                    CalculateUpdatedLikelihood();
                    return;
                }

                if (string.IsNullOrWhiteSpace(ThreatRelevance) || string.IsNullOrWhiteSpace(SeverityPervasiveness))
                { return; }

                List<Likelihood> Likelihoods = PopulateLikelihoodMatrix();
                Likelihood = Likelihoods.FirstOrDefault(x => x.Relevance.Equals(ThreatRelevance) && x.SeverityOrPervasiveness.Equals(SeverityPervasiveness))?.CalculatedLikelihood;
                if (!string.IsNullOrWhiteSpace(Impact))
                { CalculateRisk(); }
            }
            catch (Exception exception)
            {
                log.Error("Unable to calculate likelihood.");
                log.Debug($"Exception Details: {exception}");
                throw exception;
            }
        }

        private void CalculateUpdatedLikelihood()
        {
            try
            {
                if (SelectedMitigationsOrCondition == null)
                { return; }

                if (string.IsNullOrWhiteSpace(EditableMitigationsOrCondition.Threat_Relevance) || string.IsNullOrWhiteSpace(EditableMitigationsOrCondition.Severity_Pervasiveness))
                { return; }

                List<Likelihood> Likelihoods = PopulateLikelihoodMatrix();
                EditableMitigationsOrCondition.Likelihood = Likelihoods.FirstOrDefault(x => x.Relevance.Equals(EditableMitigationsOrCondition.Threat_Relevance) && x.SeverityOrPervasiveness.Equals(EditableMitigationsOrCondition.Severity_Pervasiveness))?.CalculatedLikelihood;
                if (!string.IsNullOrWhiteSpace(EditableMitigationsOrCondition.Impact))
                { CalculateUpdatedRisk(); }
            }
            catch (Exception exception)
            {
                log.Error("Unable to calculate likelihood.");
                log.Debug($"Exception Details: {exception}");
                throw exception;
            }
        }

        public RelayCommand CalculateRiskCommand => new RelayCommand(CalculateRisk);

        private void CalculateRisk()
        { 
            try
            {

                if (SelectedMitigationsOrCondition != null)
                {
                    CalculateUpdatedRisk();
                    return;
                }

                if (string.IsNullOrWhiteSpace(Likelihood) || string.IsNullOrWhiteSpace(Impact))
                { return; }

                List<Risk> Risks = PopulateRiskMatrix();
                Risk = Risks.FirstOrDefault(x => x.Likelihood.Equals(Likelihood) && x.Impact.Equals(Impact))?.CalculatedRisk;
            }
            catch (Exception exception)
            {
                log.Error("Unable to calculate risk.");
                log.Debug($"Exception Details: {exception}");
                throw exception;
            }
        }

        private void CalculateUpdatedRisk()
        {
            try
            {
                if (SelectedMitigationsOrCondition == null)
                { return; }

                if (string.IsNullOrWhiteSpace(EditableMitigationsOrCondition.Likelihood) || string.IsNullOrWhiteSpace(EditableMitigationsOrCondition.Impact))
                { return; }

                List<Risk> Risks = PopulateRiskMatrix();
                EditableMitigationsOrCondition.Risk = Risks.FirstOrDefault(x => x.Likelihood.Equals(EditableMitigationsOrCondition.Likelihood) && x.Impact.Equals(EditableMitigationsOrCondition.Impact))?.CalculatedRisk;
            }
            catch (Exception exception)
            {
                log.Error("Unable to calculate risk.");
                log.Debug($"Exception Details: {exception}");
                throw exception;
            }
        }

        public RelayCommand ModifyMitigationCommand => new RelayCommand(ModifyMitigation);

        private void ModifyMitigation()
        {
            try
            {
                if (SelectedMitigationsOrCondition == null)
                { AddMitigation(); }
                else
                { UpdateMitigation(); }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }

        private void AddMitigation()
        {
            BackgroundWorker backgroundWorker = new BackgroundWorker();
            backgroundWorker.DoWork += AddMitigationBackgroundWorker_DoWork;
            backgroundWorker.RunWorkerCompleted += MitigationBackgroundWorker_RunWorkerCompleted;
            backgroundWorker.RunWorkerAsync();
            backgroundWorker.Dispose();
        }

        private void AddMitigationBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                if (Vulnerabilities.Count(v => v.IsChecked) < 1 || Groups.Count(g => g.IsChecked) < 1)
                { return; }

                if (DatabaseBuilder.sqliteConnection.State.ToString().Equals("Closed"))
                { DatabaseBuilder.sqliteConnection.Open(); }

                using (SQLiteTransaction sqliteTransaction = DatabaseBuilder.sqliteConnection.BeginTransaction())
                {
                    using (SQLiteCommand sqliteCommand = DatabaseBuilder.sqliteConnection.CreateCommand())
                    {
                        SetInitialSqliteParameters("MitigationOrCondition", sqliteCommand);
                        sqliteCommand.Parameters["Impact_Description"].Value = ImpactDescription ?? "";
                        sqliteCommand.Parameters["Predisposing_Conditions"].Value = PredisposingConditions ?? "";
                        sqliteCommand.Parameters["Technical_Mitigation"].Value = TechnicalMitigations ?? "";
                        sqliteCommand.Parameters["Proposed_Mitigation"].Value = ProposedMitigations ?? "";
                        sqliteCommand.Parameters["Threat_Relevance"].Value = ThreatRelevance ?? "";
                        sqliteCommand.Parameters["Severity_Pervasiveness"].Value = SeverityPervasiveness ?? "";
                        sqliteCommand.Parameters["Likelihood"].Value = Likelihood ?? "";
                        sqliteCommand.Parameters["Impact"].Value = Impact ?? "";
                        sqliteCommand.Parameters["Risk"].Value = Risk ?? "";
                        sqliteCommand.Parameters["Residual_Risk"].Value = ResidualRisk ?? "";
                        sqliteCommand.Parameters["Residual_Risk_After_Proposed"].Value = ResidualRiskAfterProposed ?? "";
                        sqliteCommand.Parameters["Mitigated_Status"].Value = MitigatedStatus ?? "";
                        sqliteCommand.Parameters["Estimated_Completion_Date"].Value = EstimatedCompletionDate ?? "";
                        sqliteCommand.Parameters["IsApproved"].Value = false.ToString();

                        foreach (Vulnerability vuln in Vulnerabilities.Where(v => v.IsChecked))
                        {
                            sqliteCommand.Parameters["Vulnerability_ID"].Value = vuln.Vulnerability_ID;
                            databaseInterface.InsertMitigationOrCondition(sqliteCommand);
                            sqliteCommand.Parameters["MitigationOrCondition_ID"].Value =
                                databaseInterface.SelectLastInsertRowId(sqliteCommand);
                            foreach (Group group in Groups.Where(g => g.IsChecked))
                            {
                                sqliteCommand.Parameters["Group_ID"].Value = group.Group_ID;
                                databaseInterface.MapMitigationToGroup(sqliteCommand);
                            }
                        }
                    }
                    sqliteTransaction.Commit();
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to add mitigation.");
                log.Debug($"Exception Details: {exception}");
            }
            finally
            { DatabaseBuilder.sqliteConnection.Close(); }
        }

        private void UpdateMitigation()
        {
            BackgroundWorker backgroundWorker = new BackgroundWorker();
            backgroundWorker.DoWork += UpdateMitigationBackgroundWorker_DoWork;
            backgroundWorker.RunWorkerCompleted += MitigationBackgroundWorker_RunWorkerCompleted;
            backgroundWorker.RunWorkerAsync();
            backgroundWorker.Dispose();
        }

        private void UpdateMitigationBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                if (DatabaseBuilder.sqliteConnection.State.ToString().Equals("Closed"))
                { DatabaseBuilder.sqliteConnection.Open(); }

                using (SQLiteTransaction sqliteTransaction = DatabaseBuilder.sqliteConnection.BeginTransaction())
                {
                    using (SQLiteCommand sqliteCommand = DatabaseBuilder.sqliteConnection.CreateCommand())
                    {
                        SetInitialSqliteParameters("MitigationOrCondition", sqliteCommand);
                        sqliteCommand.Parameters["MitigationOrCondition_ID"].Value =
                            EditableMitigationsOrCondition.MitigationOrCondition_ID;
                        sqliteCommand.Parameters["Impact_Description"].Value = EditableMitigationsOrCondition.Impact_Description ?? "";
                        sqliteCommand.Parameters["Predisposing_Conditions"].Value = EditableMitigationsOrCondition.Predisposing_Conditions ?? "";
                        sqliteCommand.Parameters["Technical_Mitigation"].Value = EditableMitigationsOrCondition.Technical_Mitigation ?? "";
                        sqliteCommand.Parameters["Proposed_Mitigation"].Value = EditableMitigationsOrCondition.Proposed_Mitigation ?? "";
                        sqliteCommand.Parameters["Threat_Relevance"].Value = EditableMitigationsOrCondition.Threat_Relevance ?? "";
                        sqliteCommand.Parameters["Severity_Pervasiveness"].Value = EditableMitigationsOrCondition.Severity_Pervasiveness ?? "";
                        sqliteCommand.Parameters["Likelihood"].Value = EditableMitigationsOrCondition.Likelihood ?? "";
                        sqliteCommand.Parameters["Impact"].Value = EditableMitigationsOrCondition.Impact ?? "";
                        sqliteCommand.Parameters["Risk"].Value = EditableMitigationsOrCondition.Risk ?? "";
                        sqliteCommand.Parameters["Residual_Risk"].Value = EditableMitigationsOrCondition.Residual_Risk ?? "";
                        sqliteCommand.Parameters["Residual_Risk_After_Proposed"].Value = EditableMitigationsOrCondition.Residual_Risk_After_Proposed ?? "";
                        sqliteCommand.Parameters["Mitigated_Status"].Value = EditableMitigationsOrCondition.Mitigated_Status ?? "";
                        sqliteCommand.Parameters["Estimated_Completion_Date"].Value = EditableMitigationsOrCondition.Estimated_Completion_Date ?? "";
                        sqliteCommand.Parameters["IsApproved"].Value = EditableMitigationsOrCondition.IsApproved;

                        databaseInterface.UpdateMitigationOrCondition(sqliteCommand);

                        foreach (Group group in Groups.Where(g => g.IsChecked))
                        {
                            sqliteCommand.Parameters["Group_ID"].Value = group.Group_ID;
                            databaseInterface.MapMitigationToGroup(sqliteCommand);
                        }
                    }
                    sqliteTransaction.Commit();
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to add mitigation.");
                log.Debug($"Exception Details: {exception}");
            }
        }

        public RelayCommand ClearSelectedMitigationCommand => new RelayCommand(ClearSelectedMitigation);

        private void ClearSelectedMitigation()
        {
            try
            {
                SelectedMitigationsOrCondition = null;
                ClearVulnerabilityGroupsChecked();
            }
            catch (Exception exception)
            {
                log.Error("Unable to clear selected mitigation.");
                throw exception;
            }
        }

        public RelayCommand DeleteMitigationCommand => new RelayCommand(DeleteMitigation);

        private void DeleteMitigation()
        {
            BackgroundWorker backgroundWorker = new BackgroundWorker();
            backgroundWorker.DoWork += DeleteMitigationBackgroundWorker_DoWork;
            backgroundWorker.RunWorkerCompleted += MitigationBackgroundWorker_RunWorkerCompleted;
            backgroundWorker.RunWorkerAsync();
            backgroundWorker.Dispose();
        }

        private void DeleteMitigationBackgroundWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                if (SelectedMitigationsOrCondition == null)
                { return; }

                MitigationsOrCondition mitigationToDelete = SelectedMitigationsOrCondition as MitigationsOrCondition;

                if (DatabaseBuilder.sqliteConnection.State.ToString().Equals("Closed"))
                { DatabaseBuilder.sqliteConnection.Open(); }

                using (SQLiteTransaction sqliteTransaction = DatabaseBuilder.sqliteConnection.BeginTransaction())
                {
                    using (SQLiteCommand sqliteCommand = DatabaseBuilder.sqliteConnection.CreateCommand())
                    {
                        sqliteCommand.Parameters.Add(new SQLiteParameter("MitigationOrCondition_ID",
                            mitigationToDelete.MitigationOrCondition_ID));
                        databaseInterface.DeleteMitigationGroupMapping(sqliteCommand);
                        databaseInterface.DeleteMitigationOrCondition(sqliteCommand);
                    }
                    sqliteTransaction.Commit();
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to delete mitigation.");
                log.Debug($"Exception Details: {exception}");
                throw exception;
            }
            finally
            { DatabaseBuilder.sqliteConnection.Close(); }
        }

        private void MitigationBackgroundWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            try
            {
                ClearMitigationValues();
                ClearVulnerabilityGroupsChecked();
                Messenger.Default.Send(new NotificationMessage<string>("ModelUpdate", "VulnerabilityModel"), MessengerToken.ModelUpdated);
            }
            catch (Exception exception)
            {
                log.Error("Unable to cleanup after adding mitigation.");
                log.Debug($"Exception Details: {exception}");
            }
        }

        private void ClearMitigationValues()
        {
            try
            {
                ImpactDescription = string.Empty;
                PredisposingConditions = string.Empty;
                TechnicalMitigations = string.Empty;
                ProposedMitigations = string.Empty;
                ThreatRelevance = null;
                SeverityPervasiveness = null;
                Likelihood = string.Empty;
                Impact = null;
                Risk = string.Empty;
                ResidualRisk = null;
                ResidualRiskAfterProposed = null;
                MitigatedStatus = null;
                EstimatedCompletionDate = string.Empty;
            }
            catch (Exception exception)
            {
                log.Error("Unable to clear mitigation parameters.");
                log.Debug($"Exception Details: {exception}");
            }
        }

        private void SetEditableMitigationOrCondition()
        {
            try
            {
                if (SelectedMitigationsOrCondition == null)
                {
                    EditableMitigationsOrCondition = null;
                    return;
                }

                EditableMitigationsOrCondition = (MitigationsOrCondition)SelectedMitigationsOrCondition;
                ClearVulnerabilityGroupsChecked();
                foreach (Vulnerability vuln in Vulnerabilities.Where(v =>
                    v.Vulnerability_ID == EditableMitigationsOrCondition.Vulnerability_ID))
                { vuln.IsChecked = true; }

                foreach (Group group in EditableMitigationsOrCondition.Groups)
                { Groups.FirstOrDefault(g => g.Group_ID == group.Group_ID).IsChecked = true; }
            }
            catch (Exception exception)
            {
                log.Error("Unable to clear set editable mitigation.");
                log.Debug($"Exception Details: {exception}");
            }
        }

        private void ClearVulnerabilityGroupsChecked()
        {
            try
            {
                foreach (Vulnerability vuln in Vulnerabilities.Where(v => v.IsChecked))
                {
                    vuln.IsChecked = false;
                    foreach (Group group in Groups.Where(g => g.IsChecked))
                    { group.IsChecked = false; }
                }
            }
            catch (Exception exception)
            {
                log.Error("Unable to clear checked vulnerabilities and groups.");
                log.Debug($"Exception Details: {exception}");
                throw exception;
            }
        }
    }
}
